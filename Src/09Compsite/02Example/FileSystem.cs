namespace _09Compsite._02Example
{
    // Êñá‰ª∂Á≥ªÁªüÁªÑ‰ª∂ÊäΩË±°Á±ª
    public abstract class FileSystemComponent
    {
        protected string name;
        
        public FileSystemComponent(string name)
        {
            this.name = name;
        }

        public abstract void Add(FileSystemComponent component);
        public abstract void Remove(FileSystemComponent component);
        public abstract void Display(int depth);
        public abstract long GetSize();
    }

    // Êñá‰ª∂Á±ªÔºàÂè∂Â≠êËäÇÁÇπÔºâ
    public class File : FileSystemComponent
    {
        private long size;

        public File(string name, long size) : base(name)
        {
            this.size = size;
        }

        public override void Add(FileSystemComponent component)
        {
            throw new NotSupportedException("Êñá‰ª∂‰∏çËÉΩÊ∑ªÂä†Â≠êÈ°π");
        }

        public override void Remove(FileSystemComponent component)
        {
            throw new NotSupportedException("Êñá‰ª∂‰∏çËÉΩÁßªÈô§Â≠êÈ°π");
        }

        public override void Display(int depth)
        {
            Console.WriteLine(new string(' ', depth) + "üìÑ " + name + $" ({size} bytes)");
        }

        public override long GetSize()
        {
            return size;
        }
    }

    // Êñá‰ª∂Â§πÁ±ªÔºàÁªÑÂêàËäÇÁÇπÔºâ
    public class Directory : FileSystemComponent
    {
        private List<FileSystemComponent> children = new List<FileSystemComponent>();

        public Directory(string name) : base(name)
        {
        }

        public override void Add(FileSystemComponent component)
        {
            children.Add(component);
        }

        public override void Remove(FileSystemComponent component)
        {
            children.Remove(component);
        }

        public override void Display(int depth)
        {
            Console.WriteLine(new string(' ', depth) + "üìÅ " + name + $" ({GetSize()} bytes)");
            
            foreach (FileSystemComponent component in children)
            {
                component.Display(depth + 2);
            }
        }

        public override long GetSize()
        {
            long totalSize = 0;
            foreach (FileSystemComponent component in children)
            {
                totalSize += component.GetSize();
            }
            return totalSize;
        }
    }
}